#!/usr/bin/env python
PACKAGE = "blaser_pcl"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("simplecb_percent", double_t, 0, "Color balance percent", 1.0, 0.01, 10.0)
gen.add("simplecb_enabled", bool_t,   0, "Enable color balance",  False)

red_mask_1_lo_group = gen.add_group("red_mask_1_lo", type="collapse")
red_mask_1_lo_group.add("RMask_1_Lo_H",    int_t,    0, "Red laser line mask 1 Lo H", 92,  0, 180)
red_mask_1_lo_group.add("RMask_1_Lo_S",    int_t,    0, "Red laser line mask 1 Lo S", 14,  0, 255)
red_mask_1_lo_group.add("RMask_1_Lo_V",    int_t,    0, "Red laser line mask 1 Lo V", 0,   0, 255)

red_mask_1_hi_group = gen.add_group("red_mask_1_hi", type="collapse")
red_mask_1_hi_group.add("RMask_1_Hi_H",    int_t,    0, "Red laser line mask 1 Hi H", 180,  0, 180)
red_mask_1_hi_group.add("RMask_1_Hi_S",    int_t,    0, "Red laser line mask 1 Hi S", 255,  0, 255)
red_mask_1_hi_group.add("RMask_1_Hi_V",    int_t,    0, "Red laser line mask 1 Hi V", 255,  0, 255)

red_mask_2_lo_group = gen.add_group("red_mask_2_lo", type="collapse")
red_mask_2_lo_group.add("RMask_2_Lo_H",    int_t,    0, "Red laser line mask 2 Lo H", 0,    0, 180)
red_mask_2_lo_group.add("RMask_2_Lo_S",    int_t,    0, "Red laser line mask 2 Lo S", 100,   0, 255)
red_mask_2_lo_group.add("RMask_2_Lo_V",    int_t,    0, "Red laser line mask 2 Lo V", 150,  0, 255)

red_mask_2_hi_group = gen.add_group("red_mask_2_hi", type="collapse")
red_mask_2_hi_group.add("RMask_2_Hi_H",    int_t,    0, "Red laser line mask 2 Hi H", 43,   0, 180)
red_mask_2_hi_group.add("RMask_2_Hi_S",    int_t,    0, "Red laser line mask 2 Hi S", 191,  0, 255)
red_mask_2_hi_group.add("RMask_2_Hi_V",    int_t,    0, "Red laser line mask 2 Hi V", 202,  0, 255)

outlier_group = gen.add_group("noise_filters", type="collapse")
outlier_group.add("outlier_removel", bool_t, 0, "Enable outlier removal", True)
outlier_group.add("roi_r_percent", double_t, 0, "ROI row top cap", 0.078125, 0.0, 0.99)
outlier_group.add("roi_c_percent", double_t, 0, "ROI col side cap (R/L)", 0.015625, 0.0, 0.5)


# gen.add("redmask_2_lo_h",    int_t,    0, "Red laser line mask 2 H", 180,  0, 100)
# gen.add("redmask_2_lo_s",    int_t,    0, "Red laser line mask 2 S", 255,  0, 100)
# gen.add("redmask_2_lo_v",    int_t,    0, "Red laser line mask 2 V", 255,  0, 100)

# gen.add("redmask_1_lo_s", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "blaser_pointcloud_pub", "LaserExtraction"))